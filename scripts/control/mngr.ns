let filepack = ["/basic/w.js",
				"/basic/g.js",
				"/basic/h.js",];

let config = {
	prefix:"pserver",
}

let servers = [];
let resources = [];
let rooted = [];
let notRooted = [];
let scripts ={
	wmanager : "/scripts/control/wmanager.js",
};

/** @param {NS} ns **/
export async function main(ns) {
	//Collect all servers data
	ns.print("Running TreeServers");
	servers = treeServers(ns);

	//shove it somewhere that can be found
	localStorage.setItem("servers", JSON.stringify(servers));

	//find hackable servers
	var myHack = ns.getHackingLevel();
	ns.print("Finding and rooting systems");
	findRootable(ns, myHack);

	//find suitable targets
	findTarget(ns, myHack);

	//debug output
	//ns.tprint(JSON.stringify(servers, null, 2));
}

function treeServers(ns) {
	var servers = [];

	var queue = []
	queue.push("home");

	//Object.assign(servers, {"home":{"parent":null}});
	servers.push({ "id": "home", "parent": null })

	while (queue.length > 0) {
		//get currentNode
		var currentNode = queue[0];
		var index = servers.findIndex(s => s.id == currentNode)
		//get currentNode parent
		var parent = servers[index].parent;

		//add server details
		var s = ns.getServer(currentNode);
		//Object.assign(servers[currentNode],{"details":s});
		servers[index].details = s;

		//find children and create new server entry
		//Object.assign(servers[currentNode],{"children":[]});
		servers[index].children = []
		var neighbors = ns.scan(currentNode);
		for (let l in neighbors) {
			if (parent == null || neighbors[l] != parent) {
				let host = neighbors[l]
				queue.push(host);
				servers[index].children.push(host);
				//Object.assign(servers[host], {"parent":currentNode});
				servers.push({ "id": host, "parent": currentNode, "targeted": false });
			}
		}

		//if purchased server, add to resources
		if(servers[index].details.purchasedByPlayer) {
			resources.push(servers[index]);
		}
		if ( !s.purchasedByPlayer && s.hasAdminRights) {
			rooted.push(servers[index]);
		} else if (!s.hasAdminRights) {
			notRooted.push(servers[index]);
		}

		queue.shift();
	}

	return servers;
}

function rootServer(ns, server) {
	if (ns.fileExists("BruteSSH.exe", "home")) {
		ns.brutessh(server);
	}
	if (ns.fileExists("FTPCrack.exe", "home")) {
		ns.ftpcrack(server);
	}
	if (ns.fileExists("relaySMTP.exe", "home")) {
		ns.relaysmtp(server);
	}
	if (ns.fileExists("HTTPWorm.exe", "home")) {
		ns.httpworm(server);
	}
	if (ns.fileExists("SQLInject.exe", "home")) {
		ns.sqlinject(server);
	}
	ns.nuke(server);
}

function maxPorts(ns) {
	var ports = 0;

	if (ns.fileExists("BruteSSH.exe", "home")) {
		ports++;
	}
	if (ns.fileExists("FTPCrack.exe", "home")) {
		ports++;
	}
	if (ns.fileExists("relaySMTP.exe", "home")) {
		ports++;
	}
	if (ns.fileExists("HTTPWorm.exe", "home")) {
		ports++;
	}
	if (ns.fileExists("SQLInject.exe", "home")) {
		ports++;
	}

	return ports;
}

function findRootable(ns, hlevel) {
	var myPorts = maxPorts(ns);

	for( let i = notRooted.length - 1; i > -1; --i) {
		//ns.tprint(servers[i]);
		if(notRooted[i].details.requiredHackingSkill <= hlevel && notRooted[i].details.numOpenPortsRequired <= myPorts) {
			rootServer(servers[i].id);
			ns.print(`Server ${servers[i].id} has been rooted`);
			rooted.push(servers[i]);
			notRooted.pop(i);
		}
	}
}

function prepServer(ns, server) {
	var minDiff = server.details.minDifficulty + 5
	var time = ns.getWeakenTime(server.id);
	var drop = ns.weakenAnalyze(1);
	var totalRuns = Math.ceil((server.details.hackDifficulty - minDiff) / drop);
	var resource = getResource(ns, scripts["wmanager"], 1);

	if ( resource != null ) {
		ns.print(`Running prep on ${server.id}`)
		ns.exec(scripts["wmanager"], resource[0].id, 1, server.id, totalRuns, time);
	}
	else
		ns.print("Not enough resources");

}

function findTarget(ns, hlevel) {
	for( let i = 0; i < rooted.length; ++i){
		if (rooted[i].id == "home" || (servers[i].id.indexOf(config.prefix) > -1 ))
			continue;
		else {
			if( rooted[i].details.requiredHackingSkill <= hlevel && !rooted[i].targeted) {
				prepServer(ns, rooted[i]);
			}
		}
	}
}

function getResource(ns, script, threads) {
	var size = ns.getScriptRam(script);
	var left = threads;
	
	for( let i = 0; i < resources.length; ++i) {
		let freeRam = resources[i].details.maxRam - resources[i].details.ramUsed;
		if( freeRam >= size ) {
			let runnable = Math.floor(freeRam / size)
			if( runnable == 0)
				continue;
			else if( runnable < threads ) {
				runnable = threads;
				resources.push({s:resources[i].id, t:runnable});
			}
			else {
				resources.push({s:resources[i].id, t:threads});
				return resources;
			}
		}
	}

	return null;
}